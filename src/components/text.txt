1) What is JavaScript? @Explain its use in web development!
2) How does the event 6 loop work in JS? #Important for async code.
3) What are closures? -> Used in - functional programming...
4) Explain "this" keyword in JavaScript; show with example.
5) What is the difference between var, let, and const? _Key to block scope.







1. C Basic Pattern

Practical (10 P):

1) Print a square of * of size n.
2) Print a right-angled triangle using *.
3) Print a reverse triangle using numbers.
4) Print a pyramid of *.
5) Print a diamond pattern of *.
6) Print a square of numbers from 1 to n.
7) Print a right-angled triangle of numbers.
8) Print a hollow square of *.
9) Print a pattern of increasing alphabets in a triangle.
10) Print a multiplication table pattern for numbers 1–5.

Theory (10 T):

1) What is a loop in C? Name different types.
2) Explain the difference between while and for loop.
3) What is a nested loop? Give an example scenario.
4) Explain the concept of a pattern program.
5) What is a compiler and what does it do?
6) Difference between printf and scanf.
7) What is a variable in C?
8) Explain the difference between int and float.
9) What is the purpose of break and continue statements?
10) Explain how a for loop executes in C.







2. C Logical / Array

Practical (10 P):

1) Find the largest element in an array.
2) Find the smallest element in an array.
3) Sum all elements of an array.
4) Count even and odd numbers in an array.
5) Reverse an array.
6) Copy one array into another.
7) Merge two arrays.
8) Find the second largest element.
9) Check if an array is sorted in ascending order.
10) Count the frequency of each element in an array.


Theory (10 T):

1) What is an array in C?
2) Difference between single and multi-dimensional array.
3) How are array elements stored in memory?
4) Explain the concept of array index.
5) What is the default value of array elements in C?
6) Difference between int arr[5] and int *arr.
7) Explain static vs dynamic array.
8) Why do arrays start from index 0 in C?
9) How to pass arrays to functions.
10) Explain the difference between = and == in context of arrays.





3. Java OOPs

Practical (10 P):

1) Create a class Student with a constructor to initialize name and age.
2) Create getter and setter methods for the class above.
3) Create a method display() in the class and call it from main.
4) Implement method overloading with two add() methods (int and double).
5) Create two classes demonstrating simple inheritance.
6) Create a class with a static variable and static method.
7) Implement toString() method in a class.
8) Create a class with a final variable and explain its use.
9) Demonstrate use of this keyword in a constructor.
10) Create a class with a private variable and show how encapsulation works.


Theory (10 T):

1) What is OOP in Java? Name its main concepts.
2) Explain inheritance with an example.
3) What is polymorphism in Java?
4) Difference between method overloading and overriding.
5) Explain encapsulation and why it is important.
6) What is the use of static keyword?
7) What is a constructor and how is it different from a method?
8) Explain the this keyword.
9) What is the difference between == and equals() in Java?
10) Explain final keyword in Java (variable, method, class).



java Theory

1) What is the difference between JDK, JRE, and JVM?  
2) Explain the difference between equals() and == in Java.  
3) What is the difference between String, StringBuilder, and StringBuffer?  
4) What is the difference between Array and ArrayList in Java?  
5) What is the difference between throw and throws in Java?  
6) Explain the concept of garbage collection in Java.  
7) What is the difference between checked and unchecked exceptions?  
8) What are wrapper classes in Java, and why are they needed?  
9) Explain the difference between abstract class and interface in Java.  
10) What is the difference between final, finally, and finalize in Java?  
11) What is the difference between a constructor and a method in Java?  
12) What is the difference between static binding and dynamic binding?  
13) What are Java packages, and why are they used?  
14) What is the difference between private, protected, public, and default access specifiers?  
15) Explain the concept of upcasting and downcasting in Java.  
16) What are default methods in interfaces, and when were they introduced?  
17) What is the difference between method overloading and method overriding?  
18) Explain the concept of immutability in Java with respect to the String class.  
19) What is the difference between shallow copy and deep copy in Java?  
20) What is the difference between Hashtable, HashMap, and LinkedHashMap?  
21) What is the difference between TreeSet and HashSet in Java?  
22) What is multithreading in Java, and how is it achieved?  
23) What is synchronization in Java, and why is it used?  
24) What is the difference between sleep() and wait() in Java threads?  
25) Explain the life cycle of a thread in Java.  
26) What is the difference between transient and volatile keywords?  
27) What is the difference between serialization and deserialization?  
28) What is the purpose of the instanceOf operator in Java?  
29) What is the difference between Callable and Runnable interfaces?  
30) What is the difference between Composition and Inheritance in Java?  


java Practical

1) Write a Java program to check whether a number is prime or not.  
2) Write a Java program to reverse a string without using built-in functions.  
3) Write a Java program to find the factorial of a number using recursion. 
4) Write a Java program to demonstrate multiple catch blocks.  
5) Write a Java program to demonstrate the use of the final keyword with a class and method.  
6) Write a Java program to implement a simple calculator using switch case.  
7) Write a Java program to demonstrate constructor overloading.  
8) Write a Java program to demonstrate method overriding with Animal and Cat classes.  
9) Write a Java program to sort an array using Arrays.sort() method.  
10) Write a Java program to demonstrate the use of the instanceof operator.  
11) Write a Java program to demonstrate hierarchical inheritance.  
12) Write a Java program to find the sum of digits of a number.  
13) Write a Java program to demonstrate an interface with multiple classes implementing it.  
14) Write a Java program to demonstrate multiple inheritance using interfaces.  
15) Write a Java program to demonstrate the use of the StringBuilder class.  
16) Write a Java program to demonstrate exception propagation.  
17) Write a Java program to demonstrate the use of the throw keyword.  
18) Write a Java program to demonstrate the use of the static block.  
19) Write a Java program to demonstrate the difference between == and equals().  
20) Write a Java program to demonstrate abstract class with at least one abstract method.  
21) Write a Java program to demonstrate the difference between String and StringBuffer.  
22) Write a Java program to demonstrate the use of try-catch-finally block.  
23) Write a Java program to find the largest and smallest elements in an array.  
24) Write a Java program to demonstrate method hiding with static methods.  
25) Write a Java program to demonstrate polymorphism using method overriding.  
26) Write a Java program to demonstrate encapsulation with private variables.  
27) Write a Java program to create a thread by extending the Thread class.  
28) Write a Java program to create a thread by implementing the Runnable interface.  
29) Write a Java program to demonstrate synchronization in threads.  
30) Write a Java program to demonstrate the use of super() to call a parent class constructor. 






JAVA THEORY

1) What is OOP and why is it used in Java?
2) Explain the four pillars of OOP with simple examples.
3) Difference between class and object in Java.=
4) What is method overloading vs method overriding?
5) Explain constructor and its types.
6) What is a default constructor in Java?
7) Difference between static and instance variables.
8) Why is main method static in Java?
9) What is the difference between this and super?
10) Can constructors be inherited? Why or why not?
11) What is the difference between an abstract class and an interface?
12) Can a class extend multiple classes? Why?
13) What is encapsulation? Give a real-life example.
14) What is polymorphism? Example in Java.
15) Difference between compile-time and runtime polymorphism.
16) What is method hiding in Java?
17) Can we overload the main method?
18) What is the use of final keyword in class, method, and variable?
19) Difference between shallow copy and deep copy in Java.
20) What is the purpose of constructors in inheritance?
21) Explain the concept of dynamic method dispatch.
22) Can abstract classes have constructors?
23) Difference between == operator and .equals() method for objects.
24) What is the role of access modifiers (public, private, protected)?
26) Can we create an object of an abstract class?
27) What happens if you don’t implement all methods of an interface in a class?
28) Difference between static method and instance method.
29) Why multiple inheritance is not supported in Java (using classes)?
30) What is an inner class? Give an example3





JAVA PRACTICAL


1) Implement a class and create an object.
2) Implement a class with a constructor that initializes values.
3) Implement constructor overloading.
4) Implement method overloading (same method name, different parameters).
5) Implement single inheritance (parent and child class).
6) Implement multilevel inheritance (grandparent → parent → child).
7) Implement hierarchical inheritance (one parent, two children).
8) Implement method overriding (child class overrides parent method).
9) Implement runtime polymorphism (parent reference calling child method).
10) Implement abstraction using an abstract class.
11) Implement abstraction using an interface.
12) Implement encapsulation using private fields with getter and setter methods.
13) Implement the use of this keyword inside a constructor.
14) Implement the use of super keyword to call parent constructor or method.
15) Implement a static variable and static method.
16) Implement a final variable, method, and class16